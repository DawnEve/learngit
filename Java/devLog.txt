review Java

===========================================
v0.0.1 安装eclipse环境

Build id: 20100617-1415 不行！高亮代码，但是不能运行！
Version: Neon.1 Release (4.6.1) Build id: 20160913-0900 不高亮，不运行。

代码不亮无解。
但是代码高亮了，不运行有姐。
重新新建java项目即可。
比较了一下，发现需要
 .project
 .classpath
两个文件！
write in:http://zhengzhi2014.blog.163.com/blog/static/227196154201692984845865/



===========================================
v0.0.2 Java变量、运算符、流程控制
    《21天学通Java》(P1-P96)
    for循环中循环数字在循环结束消失，而while循环则在循环结束后继续有效。
    
===========================================
v0.0.3 Java数组  《21天学通Java》(P97-P111)
(1)语法：for(int x:arr){///xxx}
        报错：Syntax error, 'for each' statements are only available if source level is 1.5 or greater
        
        解决方法：
        在eclipse中菜单Window----preferences----java-----compiler把右边中的Compiler
        compliance level改为1.6
        右击项目，修改properties，找到java
        compiler修改compiler compliance level为1.6

(2)数组遍历、复制、求最值、冒泡法排序、二分法查找
    for(int x: arr2){//todo sth;}

(3)排序可以自己实现，或者引用类 import java.util.Arrays;
        数组的工具类:java.util.Arrays中的工具方法. 

(4)二维数组
int[][] arr=new int[3][2];//define
    //set 3 one-d array, each has 2 element;
    数组是按照地址传递的，
    - 在栈中有一个地址，指向堆内存。
    - 堆内有一个区域保存第一维度共3个数组的地址；
    - 这三个地址又指向第二个堆内存，分别是是3个数组，每个数组2个元素。







===========================================
v0.0.4 OOP  《21天学通Java》(P112-P145)
  类和对象
  + 类是图纸，对象是依照图纸盖好的房子。
    - 类是抽象的，对象是具体的。
    - 可以单继承，也可以多层继承。
    - 类包括：成员变量（类中定义的）、成员方法， 局部变量（方法中定义的）、

    •成员变量可以被public、protected、default、private、static、final修饰符修饰。 
    •局部变量可以被final修饰符修饰，但不能修饰为public、protected、default、private、static。 
    
    •成员变量是在堆里进行创建的，而局部变量是在栈里进行创建的。 
    
    •成员变量是系统默认值。 
    •局部变量没有系统默认值，必须手动赋值。

  + 类设计的技巧：
    - 先要明确这个类需要完成的功能。不要加入不相关的变量或方法。

使用构造器时需要记住：
http://longying2008.iteye.com/blog/1535722
1.构造器必须与类同名（如果一个源文件中有多个类，那么构造器必须与公共类同名）
2.每个类可以有一个以上的构造器
3.构造器可以有0个、1个或1个以上的参数
4.构造器没有返回值
5.构造器总是伴随着new操作一起调用 

OOP三大特征：
　　封装(Encapsulation);
　　继承(Inheritance);
　　多态(Polymorphism);

　　(1)封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能。
　　(2)继承是面向对象实现软件复用的重要手段，
当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员。
　　(3)多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，
这意味着同一类型的对象在运行时可能表现出不同的行为特征。


	package
	
当创建了一个包时就要引入一个包，引入一个包的关键字为import，语法为：
    - import 包名.*; 
    - import 包名.类名;


所谓静态引入就是引入包中的静态成员变量和静态方法。
静态引入的关键字为static，静态的其他内容将将在后面的小结进行讲解。静态引入的语法为：
	- import static 包名.aaa.*; 
	- import static 包名.aaa.方法名称;


	引用另一个包中类中的静态方法。import static 包.类.静态方法







===========================================
v0.0.4-1 OOP 继承、重写、重载、抽象  《21天学通Java》(P146-P195)
	封装展现了接口，隐藏了细节。
	被final关键字修饰的成员变量是不会被初始化的，成员变量必须要有初始值。
	被final关键字修饰的局部变量如果在创建的时候没有对其赋值，那么在使用前还是可以对其赋值的。
	
	静态修饰符static，所谓静态就是在内存中只能有一份。static能修饰变量、方法、语句块、内部类，

	static 成员变量类型 成员变量名称。
	static String color = "绿色";

	在Java里用static final两种关键字来修饰成员变量。

	继承
		- 在此基础上讨论重写、重载、重写与重载之间的区别，
		- 以及多态和如何灵活运用final、abstract等概念，因此学好这些概念是灵活运用多态的基石。
		- Java提供了单一继承，通过接口可以实现多重继承。

问题：
	• 了解什么是继承和继承如何使用。 
	• 掌握声明成员变量的修饰符。 
	• 熟练掌握方法的重写和重载。 
	• 了解枚举、反射和泛型等热门技术。


构造器：
	子类的无参构造器默认是调用的父类的无参构造器。


修饰符：主要有4个修饰符：public、private、default、protected

重写是基于继承的 @Override
	静态方法是不能重写的

覆盖是用于父类和子类之间。
重载是用在同一个类中，有相同的方法名，但参数不一样。


重写的关键字是override，重载的关键字为overload，重写、重载、覆盖都是基于继承的关系。
当继承的关系发生了，想用父类的方法就用super关键字来引用，
如果想用新的方法了就重写下，来完成新的功能需要。

对覆盖总结如下几点： 
	•覆盖的方法的参数列表必须要和被覆盖的方法的参数列表完全相同，才能达到覆盖的效果。 
	•覆盖的方法的返回值必须和被覆盖的方法的返回值一致。 
	•覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类。 
	•被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。

对重载总结如下： 
	•使用重载时只能定义不同的参数列表。
	•不能通过重载的方法的返回类型、访问权限和抛出的异常来进行方法的重载。 

对重写总结如下：
	•重写的方法存在于父类中，也存在于子类中。 
	•重写的方法在运行期采用多态的形式。
	•重写的方法不能比被重写的方法有更高的访问限制。 
	•重写的方法不能比被重写的方法有更多的异常。


重写toString
	@Override
	public String toString(){
		return "class Person: name="+this.name;
	}
	
重写equals	
	@Override
	public boolean equals(Object obj){
		return this==obj;
	}

抽象类和抽象方法
	abstract public void cry(); //抽象方法
	至少有一个抽象方法的类叫抽象方法。
	
	







===========================================
v0.0.4-2 OOP 多态  《21天学通Java》(P196-P198)
http://www.jb51.net/article/34413.htm
+ 方法的重写Overriding和重载Overloading是Java多态性的不同表现。
+ 重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。

static修饰的方法和final修饰的方法是在编译期绑定的；
而其他的方法是在运行期绑定，动态地判断是什么类型。 
	•多态是基于继承的，是类和接口相结合来实现的。
	- 从一定角度来看，封装和继承几乎都是为多态而准备的。


下面是多态存在的三个必要条件，要求大家做梦时都能背出来！
	多态存在的三个必要条件
	一、要有继承；
	二、要有重写；
	三、父类引用指向子类对象。

Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载。

多态的弊端: 只能使用父类的引用访问父类的成员


多态分两种：
(1)   编译时多态（设计时多态）：方法重载。
(2)   运行时多态：JAVA运行时系统根据调用该方法的实例的类型来决定选择调用哪个方法则被称为运行时多态。
（我们平时说得多的是运行时多态，所以多态主要也是指运行时多态）


方法调用的优先问题 ，优先级由高到低依次为：？
	this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。
(1)使用父类类型的引用指向子类的对象；
(2)引用只能调用父类中定义的方法和变量；
(3)子类中重写了父类的一个方法，那么在调用该方法时，将会调用子类的这个方法。
	动态连接、动态调用。
(4)变量不能被重写（覆盖）。重写只针对方法，如果子类“重写”了父类的变量，那么编译时会报错。








===========================================
v0.0.4-3 OOP 枚举类  《21天学通Java》(P198)
	枚举的本质是类
	定义枚举：代替常量使用很方便！之前 常量大都是用public static final 来定义的。
	http://blog.csdn.net/qq_27093465/article/details/52180865

enum Grade{
	w1,w2,w3,w4,w5,w6,w7
}









===========================================
v0.0.4-4 OOP 反射机制  《21天学通Java》(P199-P)
Java 语言的反射（Reflection）机制。
反射机制就是起到放大镜的效果，可以通过类名，加载这个类，显示出这个类的方法等信息。

http://lavasoft.blog.51cto.com/62575/43218/
Java 反射机制主要提供了以下功能：
	在运行时判断任意一个对象所属的类。
	在运行时构造任意一个类的对象。
	在运行时判断任意一个类所具有的成员变量和方法。
	在运行时调用任意一个对象的方法。
	
java中，一切皆对象。	
	
在JDK中，主要由以下类来实现Java反射机制，这些类都位于java.lang.reflect包中：
Class类：代表一个类。
Field 类：代表类的成员变量（成员变量也称为类的属性）。
Method类：代表类的方法。
Constructor 类：代表类的构造方法。
Array类：提供了动态创建数组，以及访问数组的元素的静态方法。


===========================================
v0.0.4-5 OOP 反射机制2
当你知道了java的反射机制后，以后当你接触到java的动态代理时就不会茫然了。

http://www.cnblogs.com/hxsyl/archive/2013/03/23/2977593.html
http://azrael6619.iteye.com/blog/429797


方法的获取，执行：
Method method = clazz.getMethod(methodName,argsClass);  
method.invoke(owner, args);  

执行静态方法：
method.invoke(null, args);
//invoke的一个参数是null，因为这是静态方法，不需要借助实例运行。

获取实例：
Constructor cons = newoneClass.getConstructor(argsClass);  
return cons.newInstance(args); 










===========================================
v0.0.4-6 OOP 泛型(SDK1.5+) 《21天学通Java》(P200-P203)
官方：https://docs.oracle.com/javase/tutorial/java/generics/index.html

在Java中，通过泛型可以给开发带来方便，通过参数的指定，可以改变其类型。
Java 泛型的类型参数之实际类型在编译时会被消除。
 
优点：
 - 能使代码看起来灵活；容易管理，不容易产生错误。 
 - 使用泛型能使代码量减少，能产生很多公共代码。
 - 使用泛型在代码编译的时候能进行类型的检查并自动转换，使代码的运行效率得到提高。 
 - 使用泛型在编译进行自动转换的时候出现了错误，会进行错误提示。 
 - 使用泛型的时候参数只能是类的类型，不能是简单类型。
 - 使用泛型的时候参数可以有多个。
 - 使用泛型的时候参数也能继承别的类型。

泛型类型就是List<T>和Map<T, T>.


泛型有很多种，类泛型，接口泛型，方法泛型 http://swiftlet.net/archives/1964

问题：JAVA泛型中的有界类型(extends super)， ? extends和? super的区别.
//TODO http://blog.csdn.net/daniel_h1986/article/details/5708605
	- List默认就是List<? entends Object>
	- 小结一下就是：上界add方法受限，下界get方法受限。


擦除也许泛型最具挑战性的方面是擦除（erasure），这是 Java 语言中泛型实现的底层技术。

多重限制的语法是用“与”符号分隔限制：
class C<T extends Comparable<? super T>&Serializable>





===========================================
v0.0.4-7 OOP 接口和抽象类 《21天学通Java》(P204-P223)
抽象类、多态特性；

目标：
•会定义接口和访问接口中的变量。 
•熟练掌握接口的使用。 
•了解接口和抽象类的区别。 
•了解接口的多态问题。 
•熟练掌握使用instanceof判断类型。


接口内的变量都是public static final类型的，可以当做常量使用。
接口里方法全为抽象。
接口里的方法默认且必须是被修饰为public、abstract类型，不能是static、final类型。

冲突处理：实现多个接口时，变量、方法重名怎么办？
	变量当常量，著名接口.变量即可。
	方法重名就不用管了？反正不报错。
	
抽象类与接口区别？	
java 类型信息 instanceof 和 isInstance区别?

为什么无关的类不能使用instanceof判断？

面总结使用instanceof有哪些规则。
	•instanceof关键字不能比较基本类型的数据。
	•instanceof关键字可以对对象和接口使用。
	•instanceof关键字的比较是基于多态的。
	•不推荐使用instanceof关键字，要多多应用多态。
	•instanceof关键字右边比较的类型只能为类和接口。

可比较接口，序列化接口//TODO
Comparable 和 Serializable。









===========================================
v0.0.4-8 OOP 构造器  《21天学通Java》(P224-P239)

构造器用法
•构造器可以使用的修饰符有public、protected、default、private，不写即为default类型的。 
•构造器的名称必须要和类的名称相同。 
•不能有返回值，void也不行。
•构造器的参数可有可无。有一个也可有多个参数。


构造器可以重载。
构造器的修饰符只有public、private、protected这三个。
如果没有参数，则会自动生成无参构造器。

父子构造器的调用流程。

什么是单例模式？保证该类只有一个实例。
	实现：用private修饰构造方法，开放一个public方法，
	如果没有实例化，就实例化并保存，如果有了，直接返回。

http://www.mindviewinc.com/Books/TIJ4/PurchaseBook.php

父子构造器执行顺序，new时发生的事件，
	1父类静态语句块；
	2.父类构造函数；
	3.子类静态语句块；
	4.子类构造器



===========================================
v0.0.4-9 OOP 内部类  《21天学通Java》(P266-P297)
http://www.tuicool.com/articles/n2aYra7

内部类：
1.内部类能访问外围类的所有成员，包括私有成员。
	①生成内部类对象，必须要先有外围类对象，具体的做法请见代码；
	②内部类能访问外围类的私有成员
	
2.内部类与static	
	①内部类不能含有static方法；
	②内部类不能含有static数据成员，除非是static final；
	③内部类可以继承含有static成员的类。
	
3.匿名内部类
class D {}
abstract class E {}

class Z extends D {
  E makeE() { return new E() {}; }
}

本质上就是返回以实例化的一个抽象类的后代类。



4. 内部类允许继承多个非接口类型
？？内部类和接口双剑合璧，给出了java中多重继承的完美替代方案？？

5.内部类继承

6.静态内部类



问题：
	•非静态内部类和如何进行非静态内部类和外部类之间的访问。 
	•局部内部类和如何进行局部内部类和外部类之间的访问。 
	•静态内部类和如何进行静态内部类和外部类之间的访问。 
	•匿名内部类和如何进行匿名内部类和外部类之间的访问。









===========================================
v0.0.4-10 异常处理  《21天学通Java》(P240-P265)


• 了解什么是异常处理。 
• 熟练掌握如何进行异常处理。 
• 掌握异常的分类和区别不同的异常。 
• 能够自定义异常和使用自定义异常。

异常的分类：
	捕获异常
	未捕获异常
	
所有的异常类都是继承Throwable类，Throwable类有两个直接子类，Error类和Exception类。
在Exception类中又有一个RuntimeException类。
在Exception类中的直接和间接子类中除去RuntimeException类的直接和间接子类，都是捕获异常。
其他的都为未捕获异常。

try-catch-finally

抛出异常：汇报给上层处理。如果一直不能解决，最后就回抛给main方法，就会中断。

throws语句是在方法的声明中使用来抛出异常，
而throw语句是在方法体内使用抛出异常。

在Exception类中定义很多方法，这里讲解一些最常见的方法。
	使用printStackTrace方法可以显示异常调用栈的信息。
	使用toString方法可以得到异常对象的字符串表示。
	使用getMessage方法可以得到异常对象中携带的出错信息。
	在自定义的异常类中因为继承了Exception类，所以同时拥有这些方法。


如果继承中有重写且抛出异常，父类方法抛出的Exception要大于同名子类方法抛出的Exception。









===========================================
v0.0.5 多线程  《21天学通Java》(P298-P326)

定义线程有两种方法，一种是继承Thread类，一种是实现Runnable接口，这两种方法是存在各自优缺点的。
和定义线程对应的就是创建线程对象，也是有两种方法


定义一个线程可以通过继承Thread类来实现，这是一种相对简单的定义线程的方法。
在Thread类中具有一个run方法，在定义的线程中需要重写这个方法。
在重写的run方法中，可以定义该线程所要执行的语句。
当线程启动时，run方法中的程序就成为一条独立的执行线程。


线程的生命周期分为五种不同的状态，分别是新建状态、准备状态、运行状态、等待/阻塞状态和死亡状态。
	- 处于新建状态中的线程被调用start方法后就会进入准备状态。
	- 从新建状态中只能进入准备状态，并且不能从其他状态进行新建状态。
	- 处于准备状态下的线程随时都可能被系统选择进入运行状态，从而执行线程。
	- 在等待/阻塞状态中的线程被解除等待和阻塞后将不直接进入运行状态，而是首先进入准备状态，
		让系统来选择哪一个线程进入运行状态。


线程优先级 public final void setPriority(int i);


public static void yield(); •可以看出yield让步方法是一个静态方法，
当在正在运行的线程中运行该方法时，该线程将回到准备状态。


太简单：没有讨论锁、死锁、共享变量、线程安全等话题。


(ThreadDemo.java)的问题：
	new Thread(new T1()).start();为什么运行的线程号不连续？
	因为继承Thread后就不需要再运行Thread了，直接new后start就可以了！！
	Runnable必须通过Thread类执行多线程，否则仅仅是主线程的一部分.








===========================================
v0.0.6 GUI  《21天学通Java》(P327-P413)
	Swing是一门开发桌面程序的技术。

	窗口类、面板类、标签类和按钮类
	事件
	
	布局管理器
	
	常用控件：除了按钮，还包括文本框、复选框、单选按钮、选项卡、分割窗格、滑块、滚动条、列表框和菜单
	



===========================================
v0.0.7 JDBC  《21天学通Java》(P414-P445)

	数据库三个层：物理存储层、概念数据层、逻辑数据层
	通用的数据库连接：JDBC,ODBC
	
	JDBC就是Java DataBase Connectivity，Java数据库连接。
	与数据库建立一个连接。向数据库发送SQL语句。处理数据库返回的结果。
	
	。ODBC是指Open DataBase Connectivity，即开放数据库互连，它建立了一组规范，
	并且提供了一组对数据库访问的标准API（应用程序编程接口），这些API利用SQL来完成其大部分任务
	
http://www.cnblogs.com/kunpengit/archive/2011/12/13/2285933.html
	使用JDBC需要在工程中导入对应的jar包。
	数据库与JDBC包的对应关系可以参考各种数据库对应的jar包、驱动类名和URL格式。
	在Eclipse下的导入方法：


驱动下载：
http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.40.zip
各种数据库对应的jar包、驱动类名和URL格式
http://dev.mysql.com/downloads/connector/j/
安装方法：http://hzy3774.iteye.com/blog/1689525
就是放到src/lib/下，然后 右击JRE system library->Build Path->configure build path


在上述对数据库进行增删改查的过程中，可以发现其共性部分，即通用的流程：
http://www.cnblogs.com/wuyuegb2312/p/3872607.html
　　(1)创建Connection对象、SQL查询命令字符串；
　　(2)对Connection对象传入SQL查询命令，获得PreparedStatement对象；
　　(3)对PreparedStatement对象执行executeUpdate()或executeQurey()获得结果；
　　(4)先后关闭PreparedStatement对象和Connection对象。
　　可见，使用JDBC时，最常打交道的是Connection、PreparedStatement这两个类，以及select中的ResultSet类。
	查阅Java API手册可以了解其具体的意义和方法。
　　Java API:http://download.oracle.com/technetwork/java/javase/6/docs/zh/api/index.html。

思考问题
1.每次SQL操作都需要建立和关闭连接，这势必会消耗大量的资源开销，如何避免？
分析：可以采用连接池，对连接进行统一维护，不必每次都建立和关闭。事实上这是很多对JDBC进行封装的工具所采用的。

2.Java代码中，传入的数据格式与数据库定义不同怎么办？如把Java的String对象赋值给数据库的tinyint属性。
分析：在执行SQL语句时，数据库会尝试进行转换。根据我的实验，如果用内容为纯字母的String对象传入tinyint的age属性时，会被转化成0。具体转化规则应该和数据库有关。




事务处理
一个事务逻辑工作单元必须具有以下四种属性，包括原子性、一致性、隔离性和永久性。
进行事务操作主要使用Connection对象中的三个方法。setAutoCommit方法是指将此连接的自动提交模式设置为给定状态。
commit方法是指提交当前的事务，并自动开始下一个事务。
rollback方法是指回滚当前的事务，并自动开始下一个事务。





1.简要说明JDBC编程步骤。
【提示】由于JDBC的编程步骤比较多，有些读者是很难全部记下来的，经常会由于没有做其中一步而造成程序发生错误。 
所以这里再来简单的说一下JDBC的编程步骤。
（1）创建数据库 
因为很多数据库操作都是指定某一个数据库来进行操作的，所以在进行数据库编程前要首先建立一个数据库。
如何创建库是会因为数据库的不同而不同的。读者可以根据需求来相应的学习特定的一种数据库。 
  
（2）创建数据源 
创建数据源是数据库操作中最容易丢的一步，也是最难发现的一步。
很多读者发现程序发生错误会，都会首先去找程序中有什么错误，从而很难发现没有创建数据源的错误。
创建数据源中将为数据源起一个名字，读者在进行该步操作时一定要起一个容易记住的名字，因为在程序中还要用到该名称。 

（3）编写程序 
JDBC数据库编程剩下的步骤都是在编写程序中的。在编写程序中也是不能丢掉必要步骤的。
首先要加载驱动，根据数据库的不同而加载不同的驱动。
 然后就是建立数据库连接，
 接下来就是使用SQL语句进行数据库操作。
 最后就是获取信息。




Java 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：
	基于字节操作的 I/O 接口：InputStream 和 OutputStream
	基于字符操作的 I/O 接口：Writer 和 Reader
	基于磁盘操作的 I/O 接口：File
	基于网络操作的 I/O 接口：Socket

一个是操作数据的方式是可以组合使用的，如这样组合使用
OutputStream out = new BufferedOutputStream(new ObjectOutputStream(new FileOutputStream("fileName"))；
还有一点是流最终写到什么地方必须要指定，要么是写到磁盘要么是写到网络中



===========================================
v0.0.8 IO  《21天学通Java》(P446-P468)
http://www.2cto.com/kf/201312/262036.html
http://www.ibm.com/developerworks/cn/java/j-lo-javaio/
目标：
•了解什么是IO流。 
•掌握流的分类。 
•熟练掌握流如何进行文件操作

当程序需要读取数据的时候，就会开启一个通向数据源的管道，
这个数据源可以是存放在硬盘中的文件，也可以是内存中的数据，或是网络上的数据。

Java中的数据流分为2种，一种是字节流，另一种是字符流。
注意：字节流和字符流的不同主要体现在操作的基本单位不同，
一个是以字节为基本单位，
另一个是以字符为基本单位。

这两种流主要由4个抽象类来表示：InputStream，OutputStream，Reader，Writer，输入输出各两种。
	其中InputStream和OutputStream表示字节流，
	Reader和Writer表示字符流，
	其他各种各样的流均是继承这4个抽象类而来的。


根据流功能层次的不同可以将其分为两类：节点流（Node Streams）与处理流（Processing Streams），
下面列出了这两种流的异同。
1.节点流一般用于直接从指定的位置进行读/写操作，例如磁盘文件、内存区域、网络连接等，
其中一般只提供了一些基本的读写操作方法，功能比较单一。
2.处理流往往是用于对其他输入/输出流进行封装，对内容进行过滤处理，
其中一般提供了一些功能比较强大的读写方法。


实际应用中，通常是将节点流与处理流二者结合起来使用。
节点流直接与指定的源或目标相连，例如某个文件、某个网络连接等。
而处理流则对节点流或其他处理流进一步进行封装，提供更丰富的输入/输出操作能力，例如缓冲、按字符串行读写等。



文件读写
File、FileInputStream、FileOutputStream、FileReader、FileWriter

BufferedInputStream是带缓冲区的输入流，默认缓冲区大小是8M，能够减少访问磁盘的次数，提高文件读取性能；
BufferedOutputStream是带缓冲区的输出流，能够提高文件的写入效率。
BufferedInputStream与BufferedOutputStream分别是FilterInputStream类和FilterOutputStream类的子类，实现了装饰设计模式。

buffer有什么用？
	没有缓存区，那么每read一次，就会发送一次IO操作；
	有缓存区，第一次read时，会一下读取x个字节放入缓存区，然后后续的read都会从缓存中读取，
	当read到缓存区末尾时，会再次读取x个字节放入缓存区。
	很明显，第二种方式，会减少IO操作，效率更高，缺点就是，内存占用的多。

字符流和字节流的转换
	这两者之间通过“InputStreamReader”和“OutputStreamWriter”来关联。
	实际上，通过“byte[]”和“String”来关联在实际开发中出现的汉字问题，这都是在字符流和字节流之间转化不统一而造成的。
	1.在从字节流转化为字符流时，实际上就是“byte[]”转化为“String”。
	 - public String(byte bytes[], String charsetName)
	2.字符流转化为字节流，实际上是String转化为byte[]。 
	 - byte[] String.getBytes(String charsetName) 
	 - 至于Java.io中还出现了许多其他的流，主要是为了提高性能和使用方便，如“BufferedInputStream”、“PipedInputStream”等。

例子：
	InputStreamReader:字节到字符的桥梁
	OutputStreamWriter:字符到字节的桥梁

何时使用转换流？
	当字节和字符之间有转换动作时；
	流操作的数据需要编码或解码时。


eclipse自动生成注释，怎么修改@author? /TODO







===========================================
v0.0.9 集合框架 《21天学通Java》(P469-P499)

集合框架主要包括列表、集合和映射,用于存储，检索，操纵和传递数据。
集合框架提供用于管理对象集合的接口和类，它包括接口，实现和算法。
主要包括	Collection接口中的：
	set接口:HashSet、SortedSet(TreeSet是其唯一实现)
	list接口: 有三种最为常用的实现类，Vector类、ArrayList类和LinkedList类。
	map接口：HashMap类，TreeMap类
	
	

TODO: 
	Cloneable, Serializable
	p.hashCode() 是怎么定义hash的呢？

1.如何使用集合中的sort方法对集合中的元素进行排序？
2.如何使用binarySearch方法搜索集合中的元素？








===========================================
v0.1.0 网络编程 《21天学通Java》(P500-P521)

目标：
 •了解什么是协议，有哪些协议。
 •了解网络编程的模型。 
 •熟练掌握使用Socket进行网络编程。

Java是如何实现数据传递的呢？答案是使用Socket的流对象进行数据传输，Sokcet类中有输入和输出流。
使用Socket进行的通信都称为Socket通信

两种Socket种类：
 - socket操作就像人们打电话，必须先拨号码，建立一个连接，然后再对话。数据包在到达接收端时的顺序与它们出发时的顺序时一样.
 - 无连接的socket操作就像是邮递员送信，邮递员只负责把信送出，至于何时发出，最后能不能到达收信人手中不能保证，
无连接的socket操作也一样，负责发出，但不保证数据包的传输质量，数据包到达目的地的顺序可能与出发时的顺序不一样。


通信过程：
开始监听后，服务器就等待客户端连接请求，客户端连接后，会话开始；在完成会话后，关闭连接。

端口号：
1~1023是系统保留。只能使用1024之后的，1024~65535
同一台主机上的同一端口号只能分配给一个特定的ServerSocket对象，不能两个ServerSocket对象监听同一个端口。



两地的socket类：
服务器端ServerSocket类，客户端的Socket类。

1.服务器端：
首先要讲的就是accept方法，使用该方法接收客户端的连接请求，并将与客户端的连接封装成一个Socket对象返回。

注意：此方法为阻塞方法，在没有接收到任何连接请求前调用此方法的线程将一直阻塞等待，
直到接收到连接请求后此方法才返回，调用此方法的线程才继续运行。

除了accept方法外还有一个close方法来关闭ServerSocket对象。
使用getLocalPort方法来获取设置的端口号。

2.客户端：
客户机创建了Socket对象后，将马上向指定的IP地址及端口发起请求且尝试连接。
于是，服务器套接字就会创建新的套接字对象，使其与客户端套接字连接起来。
一旦服务器套接字与客户端套接字成功连接后，就可以获取套接字的输入输出流，彼此进行数据交换。

Socket类中同样具有一些方法。其中getPort方法和getLocalPort方法分别是获取连接的远程端口和使用的本地端口。
getInputStream方法和getOutputStream方法分别是获取Socket对象的输入流和输出流，这两个方法是经常被使用到的。
注意：close方法虽然是很简单的，表示关闭Socket对象。但是该方法在程序中是必须有的，这是一个非常好的网络编程习惯。


怎么用cmd运行eclipse生成的class文件？
	导航到bin目录下，使用包名.类名调用。比如：
	F:\gitHub\learngit\Java\bin>java chapter10.ClientDemo
	http://bbs.csdn.net/topics/390761379/

小任务：
1.开发一个web服务器；

2.开发一个多线程的web服务器；
多线程的程序：用java编写简单Webserver，理解webserver的功能。
	// 通过线程的方式来处理客户的请求//TODO 线程是什么？我来个去。。。就是Thread！
	new Processor(socket).start();
	 /**
	 * 处理一个HTTP用户请求的线程类。
	 */
	public class Processor extends Thread {}
	
	怎么维持状态？

3.开发一个web聊天工具，客户端和服务端互相通信。
//todo






===========================================
v0.1.1 正则表达式 
事实上只要是字符处理，就没有正则做不到的事情存在。

http://blog.csdn.net/allwefantasy/article/details/3136570/
	匹配
	替换
	查找
	切割

Java正则表达式和Perl的是最为相似的。
java.util.regex包主要包括以下三个类：
(1)Pattern类：
	pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。
	要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。
	该方法接受一个正则表达式作为它的第一个参数。
(2)Matcher类：
	Matcher对象是对输入字符串进行解释和匹配操作的引擎。
	与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。
(3)PatternSyntaxException：
	PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。

在regex包中，常用的包括了两个类，Pattern(模式类)和Matcher(匹配器类)。




规则	正则表达式语法  
	一个或多个汉字	^[\u0391-\uFFE5]+$ 
	邮政编码	^[1-9]\d{5}$
	QQ号码	^[1-9]\d{4,10}$ 
	邮箱	^[a-zA-Z_]{1,}[0-9]{0,}@(([a-zA-z0-9]-*){1,}\.){1,3}[a-zA-z\-]{1,}$ 
	用户名（字母开头 + 数字/字母/下划线）	^[A-Za-z][A-Za-z1-9_-]+$
	手机号码	^1[3|4|5|8][0-9]\d{8}$ 
	URL	^((http|https)://)?([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$ 
	18位身份证号	^(\d{6})(18|19|20)?(\d{2})([01]\d)([0123]\d)(\d{3})(\d|X|x)?$


===========================================
v0.1.2 练习
Object对象











